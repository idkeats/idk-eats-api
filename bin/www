#!/usr/bin/env node

/**
 * Module dependencies.
 */
const envFile = require('../.env');
const dotEnv = require('dotenv').load(envFile);
require('babel-register');
const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = require('socket.io');
const sio_server = io(server);

sio_server.on('connection', socket => {
  
  socket.on('joinRoom', (roomId) => {
    socket.join('room' + roomId);
  });

  socket.on('sendMessage', (messageObj) => {
    sio_server.in('room' + messageObj.roomId).emit('updateMessages', messageObj.message, messageObj.user);
  });

  socket.on('sendRequest', (requestObj) => {
    sio_server.in('room' + requestObj.roomId).emit('updateRequests', requestObj.requestId, requestObj.requestFrom, requestObj.user);
  });

  socket.on('accepted', (id) => {
    sio_server.sockets.emit('acceptedRequest', id);
  });

  socket.on('disconnect', () => {
    console.log('Disconnected from socket');
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}